{"version":3,"sources":["../src/EmptyObjectError.js"],"names":["defineStack","EmptyObjectError","Error","constructor","message","name","stack"],"mappings":"AAAA,SAASA,WAAT,QAA4B,WAA5B;;AAEA,MAAMC,gBAAN,SAA+BC,KAA/B,CAAqC;AACnCC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB;AACA,UAAMA,OAAN,EAFmB,CAInB;AACA;AACA;AACA;;AACA,SAAKC,IAAL,GAAY,KAAKF,WAAL,CAAiBE,IAA7B;AACA,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKE,KAAL,GAAaN,WAAW,CAAC,IAAIE,KAAJ,GAAYI,KAAb,CAAxB,CAVmB,CAWnB;AACD;;AAbkC;;AAgBrC,eAAeL,gBAAf;AAEA","sourcesContent":["import { defineStack } from './helpers';\n\nclass EmptyObjectError extends Error {\n  constructor(message) {\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\n    super(message);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // if (Error.captureStackTrace) {\n    //   Error.captureStackTrace(this, CustomError);\n    // }\n    this.name = this.constructor.name;\n    this.message = message;\n    this.stack = defineStack(new Error().stack);\n    // Custom debugging information\n  }\n}\n\nexport default EmptyObjectError;\n\n/*\n  function EmptyObjectError (msg) {\n    this.message = msg;\n    this.name = this.constructor.name;\n\n    //\n    //    Why not going with Error.captureStackTrace\n    //\n    //    - We can't customise from which row of the stack do we want to see the errors.\n    //    - First row will be the EmptyObjectError function\n    //    - Second row will be the helper function in which we are utilising the custom error function\n    //\n\n   let stack = new Error().stack;\n    // The trace is always returned in the form of a string\n    if (typeof stack === 'string') {\n        this.stack = defineStack(stack);\n    } else {\n        //\n        //    This will call the inbuilt trace method\n        //    - The second argument omits the current function from generated stack trace\n        //    - Because of the constructor passed in the prototype, `this` refers to EmptyObjectError function\n        //    - The stack trace will however include the util method\n        //\n        Error.captureStackTrace(this, this.constructor)\n    }\n}\n\nEmptyObjectError.prototype = Object.create(Error.prototype, {\n    // Without the following constructor, `this` would refer to the Error function i.e the parent function\n    constructor: Object.assign(constructorConfig, {\n        value: EmptyObjectError\n    })\n});\n*/"],"file":"EmptyObjectError.js"}